* CoreOS demo
** Required OS configuration on the host
As root
  modprobe ip6_tables
  mkdir /var/log/calico

** Building a Felix / ACL container
Creating a simple docker container and running Felix in it.

  docker run -i --cidfile="/root/Felix.cid" --privileged=true --name="Felix" --net=host -t ubuntu:14.04 /bin/bash

Once it is running, you can reattach by doing :

  docker start -i -a `cat /root/Felix.cid`

Getting the container into a fit state :

  PS1='Felix:\w>'

  apt-get update
  apt-get install python iptables ipset xtables-addons-common wget telnet

Now install calico. First get the public key :
  On calico01 :
    apt-key export 60618AAE > /tmp/key.txt
     cd /tmp
     python -m SimpleHTTPServer 8080

  On the Felix container :
    wget http://172.18.203.200:8080/key.txt
    apt-key add key.txt

    #First line is no good; no DNS!
    #echo "deb http://linux-esx3-059/github ./" > /etc/apt/sources.list.d/calico.list
    echo "deb http://172.18.197.74/github ./" > /etc/apt/sources.list.d/calico.list

    apt-get update
    apt-get install calico-felix calico-acl-manager

    sed -i 's/controller/172.18.197.87/' /etc/calico/felix.cfg
    sed -i 's/controller/172.18.197.87/' /etc/calico/acl_manager.cfg

  Create jobs to start and stop Felix.
    echo "nohup calico-felix --config-file /etc/calico/felix.cfg > /tmp/felix.out 2>&1 &" > /usr/bin/calico.sh
    echo "nohup calico-acl-manager --config-file /etc/calico/acl_manager.cfg > /tmp/aclmgr.out 2>&1 &" >> /usr/bin/calico.sh
    echo "sleep infinity" >> /usr/bin/calico.sh
    chmod 777 /usr/bin/calico.sh

Save it off like this :
  docker commit <cid> felix:v1

Then can recreate it as required, by just creating using that image.

** Bird container creation
docker run -i --privileged=true --name="bird" --net=host -t ubuntu:14.04 /bin/bash

In the container :
  apt-get update
  apt-get install bird

HHHmmmmm... bird won't start with config issue. Need to sort that out.

Saving it off :
  docker commit <cid> felix:bird

** Plugin install
mkdir /opt/plugin
docker run -i --privileged=true --name="plugin" --net=host -v /opt/plugin:/opt/plugin -t ubuntu:14.04 /bin/bash

On the container :
  apt-get update
  apt-get install python-zmq

Running the plugin :
  cd /opt/plugin
  python plugin.py

Saving it off :
  docker commit <cid> felix:plugin

** Creating networking commands for Felix (manually - also done by script)
Create a container with no networking

    docker run -i --name=test --net=none -t ubuntu:14.04 /bin/bash
    docker run -i --name=test2 --net=none -t ubuntu:14.04 /bin/bash

*** Now network it

On the host:

  CID=8ff1e8705892  # CID as reported by docker
  IPADDR=10.0.0.2   # IPADDR we want to assigned

  CPID=`docker inspect -f '{{.State.Pid}}' $CID`
  ln -s /proc/$CPID/ns/net /var/run/netns/$CPID

  CID=348b9a77c31c
  CPID=$CID
  IPADDR=10.0.0.2

Create the veth pair and move one end into container as eth0 :
  ip netns add $CPID
  ip link add vf$CID type veth peer name tmpiface
  ip link set vf$CID up
  ip link set tmpiface netns $CPID
  ip netns exec $CPID ip link set dev tmpiface name eth0
  ip netns exec $CPID ip link set eth0 up

Add an IP address to that thing :
  ip netns exec $CPID ip addr add $IPADDR/32 dev eth0
  ip netns exec $CPID ip route add default dev eth0

Add a route to the host :
  ip route add $IPADDR/32 dev vf$CID

Tidy up :
  ip link delete <ID, here vf then CID> type veth
  ip netns delete <ns ID, here CPID>

* How to make it all happen
** Getting the images
The images were saved using "docker save felix:v3 > /opt/images/felix_v3";
they can be moved to another box and loaded using
"docker load felix:v3 < felix_v3"


** Running it all
(README.md also covers this)

*** Setting up the infrastructure
Fire up felix and the ACL manager on *linux-esx03-072*
  docker run -d -v /var/log/calico:/var/log/calico --privileged=true --name="Felix" --net=host --restart=always -t felix:v3 /usr/bin/calico-felix --config-file /etc/calico/felix.cfg
  docker run -d -v /var/log/calico:/var/log/calico --privileged=true --name="ACLMgr" --net=host --restart=always -t felix:v3 /usr/bin/calico-acl-manager --config-file /etc/calico/acl_manager.cfg

Fire up felix on *linux-esx03-073*
  docker run -d -v /var/log/calico:/var/log/calico --privileged=true --name="Felix" --net=host --restart=always -t felix:v3 /usr/bin/calico-felix --config-file /etc/calico/felix.cfg

Note that
  + If you want you can add "-i" and "-t" options, remove the "-d" option
    and the restart option, and just run /bin/bash. That lets you interactively
    run. Useful for debugging.
  + /var/log/calico is shared, so the host can see the container's log files.

Fire up bird
  On linux-esx3-072 :
    docker run -d --privileged=true --name="bird" --net=host --restart=always -t felix:bird /usr/bin/run_bird -c /etc/bird/bird72.conf -s /var/run/bird.ctl
  On linux-esx3-073 :
    docker run -d --privileged=true --name="bird" --net=host --restart=always -t felix:bird /usr/bin/run_bird -c /etc/bird/bird73.conf -s /var/run/bird.ctl

Fire up the plugin (which must run on linux-esx-072)
  docker run -i --privileged=true --name="plugin" --net=host -v /opt/plugin:/opt/plugin -t felix:plugin /bin/bash

Then you have a shell from which you can run the plugin as required, by doing :
  cd /opt/plugin
  python plugin.py

** Creating a container
On the host run
  bash -x /opt/scripts/create_container.sh IPADDR
where IPADDR is your IP address. Then restart the plugin.

Note that there is no automatic way to tidy up all these plugins - there may be issues.

